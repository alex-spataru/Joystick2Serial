#--------------------------------------------------------------------------------
# Workflow configuration
#--------------------------------------------------------------------------------

name: Deploy
on:
  push:               # Run on push
    paths-ignore:     # File patterns to ignore
    - '**.md'         # Ignore changes to *.md files

  pull_request:       # Run on pull-request
    paths-ignore:     # File-patterns to ignore
    - '**.md'         # Ignore changes to *.md files

#--------------------------------------------------------------------------------
# Define application name & version
#--------------------------------------------------------------------------------

env:
  VERSION: "1.0.0"
  EXECUTABLE: "Joystick2Serial"
  APPLICATION: "Joystick2Serial"
  UNIXNAME: "Joystick2Serial"
  QMAKE_PROJECT: "Joystick2Serial.pro"
  PUBLISHER: "Alex Spataru"
  REPO_DIR: "/home/runner/work/alex-spataru/Joystick2Serial"
  QT_VERSION: 5.15.2
  QMAKE: qmake
  CORES: 12

#--------------------------------------------------------------------------------
# Workflow jobs (GNU/Linux, macOS & Windows)
#--------------------------------------------------------------------------------

jobs:
  build-linux:
    runs-on: ubuntu-18.04
    name: 'üêß Ubuntu 18.04'
    steps:

    - name: 'üß∞ Checkout'
      uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: '‚öôÔ∏è Cache Qt'
      id: cache-qt
      uses: actions/cache@v1
      with:
        path: ../Qt
        key: ${{runner.os}}-qtcachedir-${{env.QT_VERSION}}

    - name: '‚öôÔ∏è Install Qt'
      uses: jurplel/install-qt-action@v2
      with:
        version: ${{env.QT_VERSION}}
        #modules: qtserialport qt5compat
        aqtversion: '==2.0.0'
        cached: ${{steps.cache-qt.outputs.cache-hit}}

    # Install additional dependencies, stolen from:
    # https://github.com/mapeditor/tiled/blob/master/.github/workflows/packages.yml
    - name: '‚öôÔ∏è Install dependencies'
      run: |
        sudo apt-get update
        sudo apt-get install libgl1-mesa-dev libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-render-util0 libxcb-xinerama0 libzstd-dev

    - name: 'üöß Compile application'
      run: |
          ${{env.QMAKE}} ${{env.QMAKE_PROJECT}} CONFIG+=release PREFIX=/usr
          make -j${{env.CORES}}

    - name: '‚öôÔ∏è Install linuxdeployqt'
      run: |
          wget -c -nv "https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage" -O linuxdeployqt
          chmod a+x linuxdeployqt

    - name: 'üì¶ Create AppImage'
      run: |
          make INSTALL_ROOT=appdir install
          ./linuxdeployqt appdir/usr/share/applications/*.desktop -appimage -bundle-non-qt-libs"
          # Rename AppImage to match "%AppName%-%Version%-Linux.AppImage" format
          mv ${{env.EXECUTABLE}}-${{env.VERSION}}-x86_64.AppImage ${{env.EXECUTABLE}}-${{env.VERSION}}-Linux.AppImage
          
    - name: 'üì§ Upload artifact: AppImage'
      uses: actions/upload-artifact@v2
      with:
        name: ${{env.EXECUTABLE}}-${{env.VERSION}}-Linux.AppImage
        path: ${{env.EXECUTABLE}}-${{env.VERSION}}-Linux.AppImage

  # macOS build
  build-mac:
    runs-on: macos-latest
    name: 'üçé macOS'
    steps:

    - name: 'üß∞ Checkout'
      uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: '‚öôÔ∏è Cache Qt'
      id: cache-qt
      uses: actions/cache@v1
      with:
        path: ../Qt
        key: ${{runner.os}}-qtcachedir-${{env.QT_VERSION}}

    - name: '‚öôÔ∏è Install Qt'
      uses: jurplel/install-qt-action@v2
      with:
        version: ${{env.QT_VERSION}}
        #modules: qtserialport qt5compat
        aqtversion: '==2.0.0'
        cached: ${{steps.cache-qt.outputs.cache-hit}}

    - name: 'üöß Compile application'
      run: |
           ${{env.QMAKE}} ${{env.QMAKE_PROJECT}} CONFIG+=release PREFIX=/usr
           make -j${{env.CORES}}

    - name: 'üì¶ Package application (macdeployqt and zipfile)'
      run: |
        macdeployqt ${{env.EXECUTABLE}}.app"
        #mv "${{env.EXECUTABLE}}.app" "${{env.APPLICATION}}.app"

        # ZIP application "%AppName%-%Version%-macOS.zip"
        # We use ditto instead of zip to use the same commands as Finder
        ditto -c -k --sequesterRsrc --keepParent "${{env.APPLICATION}}.app" ${{env.EXECUTABLE}}-${{env.VERSION}}-macOS.zip

    - name: 'üì§ Upload artifact: ZIP'
      uses: actions/upload-artifact@v2
      with:
        name: ${{env.EXECUTABLE}}-${{env.VERSION}}-macOS.zip
        path: ${{env.EXECUTABLE}}-${{env.VERSION}}-macOS.zip

  # Windows build
  build-windows:
    runs-on: windows-latest
    name: 'üßä Windows'
    steps:

    - name: 'üß∞ Checkout'
      uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: '‚öôÔ∏è Configure MSVC'
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x64
        spectre: true

    - name: '‚öôÔ∏è Cache Qt'
      id: cache-qt
      uses: actions/cache@v1
      with:
        path: ../Qt
        key: ${{runner.os}}-qtcachedir-${{env.QT_VERSION}}

    - name: '‚öôÔ∏è Install Qt'
      uses: jurplel/install-qt-action@v2
      with:
        version: ${{env.QT_VERSION}}
        #modules: qtserialport qt5compat
        aqtversion: '==2.0.0'
        cached: ${{steps.cache-qt.outputs.cache-hit}}

    - name: 'üöß Compile application'
      run: |
        ${{env.QMAKE}} ${{env.QMAKE_PROJECT}} CONFIG+=release PREFIX=/usr
        nmake

    # Copy Qt DLLs, compiler runtime & application icon
    - name: 'üì¶ Package application (windeployqt)'
      run: |
        mkdir bin
        move release/${{env.EXECUTABLE}}.exe bin
        windeployqt bin/${{env.EXECUTABLE}}.exe" --compiler-runtime
        mkdir "${{env.APPLICATION}}"
        move bin "${{env.APPLICATION}}"
        xcopy deploy\windows\resources\icon.ico "${{env.APPLICATION}}"
        move "${{env.APPLICATION}}" deploy\windows\nsis\
        
    - name: 'üì¶ Make NSIS installer'
      uses: joncloud/makensis-action@v3.6
      with:
        script-file: deploy/windows/nsis/setup.nsi

    - name: 'üì¶ Rename installer'
      run: |
        dir
        cd deploy/windows/nsis/
        dir
        ren *.exe ${{env.EXECUTABLE}}-${{env.VERSION}}-Windows.exe

    - name: 'üì§ Upload artifact: NSIS installer'
      uses: actions/upload-artifact@v2
      with:
        name: ${{env.EXECUTABLE}}-${{env.VERSION}}-Windows.exe
        path: deploy/windows/nsis/${{env.EXECUTABLE}}-${{env.VERSION}}-Windows.exe

  # Upload continuous build
  upload:
      name: 'üóÇ Create release and upload artifacts'
      needs:
        - build-linux
        - build-mac
        - build-windows
      runs-on: ubuntu-latest
      steps:
      - name: 'üì• Download artifacts'
        uses: actions/download-artifact@v2
      - name: 'üóÇ Inspect directory after downloading artifacts'
        run: ls -alFR
      - name: 'üöÄ Create release and upload artifacts'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
            wget -q https://github.com/TheAssassin/pyuploadtool/releases/download/continuous/pyuploadtool-x86_64.AppImage
            chmod +x pyuploadtool-x86_64.AppImage
            ./pyuploadtool-x86_64.AppImage **/${{env.EXECUTABLE}}-${{env.VERSION}}-Linux.AppImage
            ./pyuploadtool-x86_64.AppImage **/${{env.EXECUTABLE}}-${{env.VERSION}}-macOS.zip
            ./pyuploadtool-x86_64.AppImage **/${{env.EXECUTABLE}}-${{env.VERSION}}-Windows.exe
